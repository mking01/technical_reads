# Ch. 3: Computing with Numbers

# True/ False
# 1. T
# 2. F
# 3. F
# 4. T
# 5. F
# 6. F
# 7. T
# 8. T
# 9. F | if multiple inputs, will convert to a string
# 10. F / T (9 vs. 9.0 so substance yes, style no)

# Multiple Choice
# 1. C
# 2. D
# 3. D
# 4. B
# 5. B
# 6. C
# 7. D
# 8. D
# 9. A
# 10. D

# Discussion
#1.
#a.
#a = 4.0 / 10.0 + 3.5 * 2
#print(a)
#outcome: 7.4
#b.
# b = 10 % 4 + 6 / 2
# print(b)
# #outcome: 5.0
# #c.
# c = abs(4 - 20 // 3) ** 3
# print(c)
# #outcome: 8
#d.
#import math
#d = math.sqrt(4/5 - 5.0) + 7 * 3
#print(d)
#e.
#e = 3 * 10 // 3 + 10 % 3
#print(e)
#outcome: 11
#f.
#f = 3 ** 3
#print(f)
#outcome: 27

#2. Translate given expressions into the equivalent python expression
#a. (3 + 4) * 5
#b. (n * (n - 1)) / 2
#c. 4 * 3.14 * r ** 2
#d. math.sqrt((r * (math.cos(a)) ** 2) + (r * (math.sin(b)) ** 2))
#e. (y2 - y1) / (x2 - x1)

#3. Show the sequence of numbers generated by each expression
#a. range(5): 0, 1, 2, 3, 4
#b. range(3, 10): 3, 4, 5, 6, 7, 8, 9
#c. range(4, 13, 3): 4, 7, 10
#d. range(15, 5, -2): 15, 13, 11, 9, 7
#e. range(5, 3): error, iterator start > iterator end

#4. Show the output that would have been generated by the following programs.
#a.
# for i in range(1,11):
#     print(i * i)

#output:
# 1
# 4
# 9
# 16
# 25
# 36
# 49
# 64
# 81
# 100

#b.
# for i in [1,3,5,7,9]:
#     print(i, ":", i**3)
# output:
# 1 : 1
# 3 : 27
# 5 : 125
# 7 : 343
# 9 : 729

#c.
# x = 2
# y = 10
# for j in range(0, y, x):
#     print(j, end="")
#     print(x + y)
# print("done")
#
# outcome:
# 012
# 212
# 412
# 612
# 812

#d.
# ans = 0
# for i in range(1, 11):
#     ans = ans + i * i
#     print(i)
# print(ans)
#
# outcome:
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
# 10
# 385

#5. Correct answer:  Python lets you round down by tens, hundreds, thousands. So round(X, -1) rounds to the nearest tens place.
# 314 would round down to 310, while #316 would round up to 320 even though both are rounded by -1.

#6. What happens when operands to integer division or remainder operations are negative?
#a.
#print(-10 // 3)
#outcome: -4
#b.
#print(-10 % 3)
#outcome: 2
#c.
#print(10 // 3)
#outcome: 3
#d.
#print(10 % 3)
#outcome: 1
#e.
#print(-10 // 3)
#outcome: - 4

# Programming Exercises
#1. Write program to calculate volume and surface area of a sphere from its radius, given as an input.
#V = 4/3 * pi * r ** 3
#Area = 4 * pi * r ** 2

# import math
#
# def main():
#
#     print("This program calculates volume and surface area from a sphere radius.")
#     radius = eval(input("Enter sphere radius:"))
#     vol = (4/3) * math.pi * radius ** 3
#     area = 4 * math.pi * radius ** 2
#
#     print("The area of the sphere with radius", radius, "is", round(area,2))
#     print("The volume of the sphere with radius", radius, "is", round(vol,2))
# main()
#
#2. Write a program calculating cost per square inch of a circular pizza given diameter and price.
# Area = pi * r ** 2
#
# import math
#
# def main():
#
#     print("This program calculates cost per square inch of a pizza.")
#     price = eval(input("Enter pizza cost:"))
#     diameter = eval(input("Enter pizza diameter:"))
#     area = math.pi * diameter ** 2
#     price_per_inch = price / area
#
#     print("The cost per square inch is", round(price_per_inch,2))
# main()

#3. Compute the molecular weight of a carbohydrate in grams per mole based on number
# of hydrogen, carbon and oxygen atoms in the molecule.
#
# def main():
#     print("This program calculates the molecuar what of a carbohydrate in grams per mole.")
#
#     hydrogen = eval(input("Enter number of hydrogen atoms:"))
#     carbon = eval(input("Enter number of carbon atoms:"))
#     oxygen = eval(input("Enter number of oxygen atoms:"))
#
#     h_weight = hydrogen * 1.00794
#     c_weight = carbon * 12.0107
#     o_weight = 15.9994
#
#     total_weight = h_weight + c_weight + o_weight
#
#     print("Total weight is", total_weight)
#
# main()

#4. Write a program determining the distance to a lightning strike based on time elapsed
# between flash and sound of thunder.

# import datetime
#
# def main():
#     print("This program calculates distance to lightning strike based on time elapsed between flash and thunder")
#
#     lightning = datetime.datetime.strptime(input("Enter time of lightning flash in HHMM format:"), "%H%M")
#     thunder = datetime.datetime.strptime(input("Enter time of thunder in HHMM format:"), "%H%M")
#
#     time_elapsed = (thunder - lightning).seconds
#     sound_dist_in_feet = 1100 * time_elapsed #rate of 1100 ft per second for speed of sound
#     sound_dist_in_mi = sound_dist_in_feet / 5280 # convert feet to miles
#
#     print("Time elapsed in seconds:", time_elapsed)
#     print("Sound dist in feet:", sound_dist_in_feet)
#     print("Total distance to lightning strike in miles:", sound_dist_in_mi)
#
# main()

#8. The Gregorian epact is the number of days between January 1 and the prior new moon to figure out when easter falls.
# # Write a program to output the value of the epact.
#
# def main():
#     print("This program calculates the epact between January 1 and the prior new moon.")
#     year = eval(input("Enter the current year in YYYY format:"))
#
#     C = year // 100
#     #print(C)
#     epact = (8 + (C // 4) - C + ((8 * C + 13) // 25) + 11 * (year%19))%30
#
#     print("The epact is", epact)
#
# main()

#11. Write a program to find the sum of the first n numbers where n is user-provided.
# def main():
#     print("This program finds the sum of the first n numbers.")
#     n = eval(input("Enter number of numbers to be summed (sequentially):"))
#
#     total = 0
#     for i in range(0, n+1):
#         total = total + i
#
#     print("The total of numbers from 0-",n, "is", total)
#
# main()

#13. Write a program to sum a series of numbers entered by the user.  The program should prompt
# the user for how many numbers are to be summed.  The program should then prompt the user for
# each of the numbers in turn and print out a total sum after all the numbers have been entered.

# def main():
#     print("This program sums a series of user provided numbers.")
#     series = list(eval(input("Enter numbers to be totaled:")))
#
#     total = 0
#     for i in series:
#         total = total + i
#
#     print("The total of series", series, "is", total)
#
# main()


















